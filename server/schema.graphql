type Query {
  machine: Machine
}

type Mutation {
  createLaserCutter(info: CreateLaserInfo!): LaserCutter
  updateLaserCutter(info: UpdateLaserInfo!): LaserCutter
  createLaserReserve(info: ReserveLaserCutter!): LaserCutterReservation!
  cancelLaserReserve(teamId: ID!): LaserCutterReservation!

  createMachine(info: CreateMachineInfo!): Machine
  clearMachine: String
  deleteMachine: String
  userReserveMachine(info: ReserveMachineInfo!): MachineReservation!
  userCancelMachine(teamId: ID!): MachineReservation!
}

#  不是很確定要怎麼寫TT
type Subscription {
  LaserCutterInfo: LaserCutter!
  LaserCutterReservation(teamId: ID!): LaserCutterReservation!
  machineCreated: Machine
  machineUpdated: Machine
}

input ReserveMachineInfo {
  teamId: ID!
}

type MachineReservation {
  teamId: ID!
  machineId: ID!
}

input CreateMachineInfo {
  name: String!
  type: String!
  duration: Int!
}

input CreateLaserInfo {
  id: ID!
  status: Int!
  duration: Int!
  user: String
  completeTime: String
}

input UpdateLaserInfo {
  id: ID!
  status: Int!
  duration: Int
  user: String
  completeTime: String
}

type LaserCutter {
  id: ID!
  status: Int!
  duration: Int!
  user: String
  completeTime: String
}

type Machine {
  id: ID
  name: String!
  type: String!
  status: Int!
  duration: Int!
  user: String
  completeTime: String
}

# ======== Resevation of laser cutter ========

input ReserveLaserCutter {
  teamId: ID!
  material: String!
  thickness: String!
}

type LaserCutterReservation {
  teamId: ID!
  material: String
  thickness: String
  reserveStatus: Int # default=1
  updated_at: String!
}
